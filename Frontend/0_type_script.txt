BASIC TYPES
============
- Syntax
adfasdfsdfsdfsdfsdfsdfsf
- boolean
    let isDone: boolean = false;
- number : all numbers in type script are floating point values
    let decimal: number = 6;
- string 
    let color: string = "blue";
- Array
    let list: number [] = [1, 2, 3, 4, 5]; (One way)
    let list: Array<number> = [1, 2, 3]; (another way)
- Tuple
    let x: [string, number]; // Declaration
    x = ["hello", 10]; // Initialization
    console.log(x[0].string(1)) // Usage
- Enum : A way of giving freindly names to a set of numeric values
    enum Color {Red, Green, Blue}; // Default enum numbering is from 0
    let c: Color = Color.Green; // c = 1
    enum Color {Red=1, Green, Blue}; // starts with 1 instead of 0
    enum Color {Red=1, Green=3, Blue=5}; // Manually set all values
    let colorName: string = Color[3]; // Stors Green
- Any
    let notSure: any = 4;
    notSure = "TEst";
- Void: Opopsit of any (no type at all)
    function warnUser(): void{
        ...
    }

    let unusable: void = undefined // you can only assign null or undefined

- Null and Undefined
    let u: undefined = undefined
    let n: null = null;

- Never : represents a type of value that never occurs.
    function error(message: string): never{
        throw new Error(message);
    }

- Object: a type that represents the non-primitive type,
    (i.e. anything that is not number, string, boolean, null, symbol, 
    or undefined)

    declare function create (o: object | null);

    create ({prop:0}) // OK
    create (null) // OK

    create (42) // Error
    create (undefined) // Error

- Type Assertions : is like a type cast in other languages, but performs
    no special checking or restructuring of data. Has two forms

    let someValue: any = "this is a string";

    One is "angle-bracket"
    let strLength: number = (<string>someValue).length;

    Another one is "as"
    let strLength: number = (someValue as string).length;

VARIABLE DECLARATION 
====================
- Var Declaration
    - Syntax
        var a = 10;
    - Accessing samve variable with in another function
        function f(){
            var a = 10;
            function g(){
                var b = a + 1;
                return b;
            }
        }

        var g = f();
        g(); // Return 11

            - In this example g captures a that has been declared in f.
            - At any point that g gets called the value of a will be tied
                to the value of a in f.
            - Even if g is called once f is done running, it will be 
                able to access and modify a.

    - Var scoping : var declarations are accessible anywhere with in 
        their containing function, module, namespace, or global scope
        (all which will go over latter on) regardless of the containing 
        block.
        
        function f(init: boolean){
            if(init){
                var x = 10;
            }

            return x;
        }
        f(true); // returns 10
        f(false); // returns undefined

    - Variable capturing quirks

        for (var i = 0; i < 5; i++){
            setTimeout(function(){
                console.log(i);
            }, 100*i);
        }
        Output
        5
        5
        5
        5
        5

            - Why print 5 everytime instead of 1 2 3 4 5 ?
            - Thats because set time out runs after certain milliseconds
                but only after the for loop has stop executing.
            - By the time for loop finished i is already set to 5
            - To fix this use IIFE (Immediately Invoked Function Expression)
                inorder to capture i at each iteration as displayed as
                follows
        for (var i = 0; i < 5; i++){
            (function(i){
                setTimeout(function(){
                    console.log(i);
                }, 100*i);
            })(i);
        }
        Output
        1
        2
        3
        4

- Let Declaration
    - let is introduced to fix problems of var
        let hello = "Hello";

    - Block-Scoping: unlike var variables whose scopes leak out of the
        containging funciton, block-adasdfsdfscoped vadfasdfsdadariables are not visible
        outside theiadfadsfadsdsfr nearest containging block or for -loop

        functionadfasdfasdfa f (input: boolean) {
            let a = 100;
adfadsfasdfasdf
            if (input) {
                // Still okay to reference 'a'
                let b = a + 1;
                return b;
            }

            // Error: 'b' doesnt exist
            return b;
        }
            - a's scope is limited to the function block
            - b's scope is limited to the if block
    
        function foo(){
            return a; // Its ok to capture 'a'
        }
        foo(); // Iillegal call 'foo' before 'a' is declared
               // runtime should throw an error here
        let a;

    - With var it doesnt matter how many times you declare but 
        in let you cant re-declare the same varaiable either with
        let or var in the same scope
    
    - Block-scoped variable capturing : Each time a scope is run it
        creates an "enviroment" of variables and that enviroment and its 
        captured variables can exist even after everything with in 
        its scope has finished execution.

        funciton theCityThatSleeps() {
            let getCity;

            if(true){
                let city = "Seattle";

                getCity = function() {
                    return city;
                }
            }
        }

            - Since we captured city from within its environment we
                are still able to access it despite the fact that 
                the if block finished executing.
            
    - Recall that with our earlier setTimeout example we ended up 
        using IIFE to capture the state of a variable for the 
        for loop. 
        - In effect we were creating a new variable environment for
            our captured variables.

        - let declarations have drastically different behaviour when 
            declared as part of the loop.

        - Rather than introducing environment to the loop itself, 
            these declarations sort of create a new scope per iteration
        
        Therefore with let
            for(let i = 0; i < 5; i++){
                setTimeout(function(){
                    console.log(i);
                }, 100*i);
            }
            Output
            0
            1
            2
            3
            4

- Const declaration
    - another way of declaring variables
        const num = 0;
    - the same as let defnition except their values cannot be changed
        once they are bound.
    - they have the same scoping rules except you cant reassign them

- let vs const
    - applying the principle of least privilege, all declaration
        other than those you plan to modify should use const.


DESTRUCTURING
====================

- Array destructuring
    let input = [1, 2];
    let [first, second] = input;
    console.log(first); // Outputs 1
    console.log(second); // Outputs 2

    - destructuring works with already declared variables as well

    [first, second] = [second, first]; // Swap variables

    - With Paramenters to a function
        function f([first, second]:[number, number]){
            console.log(first);
            console.log(second);
        }
        f([1,2]);

    - You can create a varaiable for the remaining items using the 
        syntax ...
        let [first, ...rest] = [1,2,3,4,5];
        console.log(first); // ouputs 1
        console.log(rest); // Outputs 2,3,4,5

        let [first] = [1,2,3,4];
        console.log(first); // ouputs 1
    
        let [, second, ,fourth] = [1,2,3,4];
    
- Object destructuring

    let o = {a:"first", b:12, c:"bar"};
    let {a, b} = o;
        - This creates a new variables a and b from o.a and o.b 
        - Notice that you can skip c if you dont need it
    

    ({a, b} = {a:"first", b:12});
        - Like array destructuring you can habe assignment without 
            declaration
    
    let {a, ...passth} = o;
    let total = passth.b + passth.c.length;
        - You car create a variable for the remaining items in the 
            object

- Property renameing

    let {a:new1, b:new2} = o;
        - giving differnent names to properties
        - you can read a:new1 as "a as new1"
        - in ohter word 
            let new1 = o.a;
            let new2 = o.b;
        - the colon in here does not specify type
    
    let {a, b} : {a:string, b:number} = o;

- Default values : lets you define a default value incase a Property
    is not defined 
    function keep(wholeObj: {a:string, b?:number}){
        let {a, b = 1001 } = wholeObj;
    }
- Function declaration: destructuring is also possible in function 
    declarations.

    type C = {a: string, b?: number};
    function f({a, b}: C){
        // ...
    }
    
    function f({a="", b=0} = {}): void{
        // ...
    }
    f();

    funciton f({a, b=0} = {a:""}) : void {
        // ...
    }
    f({a:"Yes"}) // ok default b = 0
    f(); // ok defult to {a: ""}, which then default to b=0
    f({}); // error 'a' is required if you supply an argument

- Spread
    let first = [1, 2];
    let second = [3, 4];
    let bothPlus = [0, ...first, ...second, 5];
        - bothPlus is [0, 1, 2, 3, 4, 5]

    let defaults = {food: 'spicy', price:'$$', ambiance:'noise'};
    let search = {food:'rich', ...defaults};
        - search is [food: 'rich', price:'$$', ambiance:'noise']
    
    class c {
        p= 12;

        m(){

        }
    }
    let c = new C();
    let clone = {...c};
    clone.p; // OK
    clone.m(); // Error
        - Doesent allow spread of type parameters from generic functions
    

        






    
    
